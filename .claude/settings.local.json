{
  "permissions": {
    "allow": [
      "Bash(grep:*)",
      "Bash(rg:*)",
      "Bash(python:*)",
      "Bash(sed:*)",
      "Bash(cp:*)",
      "Bash(rm:*)",
      "Bash(git checkout:*)",
      "Bash(# Find line number for main function\nmain_line=$(grep -n \"^def main\" /mnt/c/Users/DavidJamesLennon/OneDrive\\ -\\ PI\\ \\&\\ Other\\ Tales/Documents/GitHub/tategaki/main.py | cut -d: -f1)\n\n# Create temp file with methods inserted before main\nhead -n $((main_line - 1)) /mnt/c/Users/DavidJamesLennon/OneDrive\\ -\\ PI\\ \\&\\ Other\\ Tales/Documents/GitHub/tategaki/main.py > /tmp/main_fixed.py\n\n# Add the methods with proper indentation inside the class\ncat >> /tmp/main_fixed.py << 'EOF'\n        \n    def _setup_document_vertical_text_direction(self):\n        \"\"\"Configure document for native Japanese vertical text layout\"\"\"\n        from docx.oxml import OxmlElement\n        from docx.oxml.ns import qn\n        \n        section = self.doc.sections[0]\n        sectPr = section._sectPr\n        \n        textDirection = sectPr.find(qn('w:textDirection'))\n        if textDirection is None:\n            textDirection = OxmlElement('w:textDirection')\n            sectPr.append(textDirection)\n        textDirection.set(qn('w:val'), 'tbRl')\n        \n    def _configure_paragraph_for_vertical_text(self, paragraph, font_size_points):\n        \"\"\"Configure paragraph for vertical text\"\"\"\n        from docx.oxml import OxmlElement\n        from docx.oxml.ns import qn\n        \n        pPr = paragraph._p.pPr\n        if pPr is None:\n            pPr = OxmlElement('w:pPr')\n            paragraph._p.insert(0, pPr)\n            \n        textDirection = pPr.find(qn('w:textDirection'))\n        if textDirection is None:\n            textDirection = OxmlElement('w:textDirection')\n            pPr.append(textDirection)\n        textDirection.set(qn('w:val'), 'tbRl')\n        \n    def _convert_grid_to_vertical_text(self, page_data):\n        \"\"\"Convert grid to vertical text\"\"\"\n        if 'columns' not in page_data:\n            return \"\"\n            \n        columns_data = page_data['columns']\n        total_columns = self.grid.max_columns_per_page\n        column_text_segments = []\n        \n        for column_number in range(total_columns, 0, -1):\n            if column_number in columns_data:\n                column_chars = []\n                for row_num in sorted(columns_data[column_number].keys()):\n                    char = columns_data[column_number][row_num]\n                    if char and len(char) == 1:\n                        column_chars.append(char)\n                if column_chars:\n                    column_text_segments.append(''.join(column_chars))\n                    \n        return '\\n'.join(column_text_segments)\n\n\nEOF\n\n# Add the rest of the file (main function onwards), excluding the duplicated methods at the end\ntail -n +$main_line /mnt/c/Users/DavidJamesLennon/OneDrive\\ -\\ PI\\ \\&\\ Other\\ Tales/Documents/GitHub/tategaki/main.py | head -n -47 >> /tmp/main_fixed.py\n\n# Replace the original file\ncp /tmp/main_fixed.py /mnt/c/Users/DavidJamesLennon/OneDrive\\ -\\ PI\\ \\&\\ Other\\ Tales/Documents/GitHub/tategaki/main.py)",
      "Bash(find:*)"
    ],
    "deny": []
  }
}